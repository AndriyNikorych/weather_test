{"version":3,"sources":["components/WeatherList/WeatherList.tsx","api/api.ts","App.tsx","index.tsx"],"names":["WeatherList","props","currentWeather","language","metric","main","name","wind","weather","sys","temp","temp_min","temp_max","pressure","humidity","max","Math","round","min","description","icon","className","country","src","alt","toUpperCase","speed","api","getWeather","cityName","a","fetch","response","json","App","useState","city","setCity","selectedCity","setSelectedCity","setcurrentWeather","setLanguage","setMetric","loadWeather","weatherFromApi","useEffect","chooseCityMessage","errorMessage","validCity","onSubmit","event","preventDefault","type","placeholder","value","onChange","target","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c841d519.chunk.js","sourcesContent":["import React from 'react';\n\ntype Props = {\n  currentWeather: WeatherAPI,\n  language: string,\n  metric: string,\n};\n\nexport const WeatherList: React.FC<Props> = (props) => {\n  const { currentWeather, language, metric } = props;\n\n  const {\n    main,\n    name,\n    wind,\n    weather,\n    sys,\n  } = currentWeather;\n\n  const {\n    temp,\n    temp_min,\n    temp_max,\n    pressure,\n    humidity,\n  } = main;\n\n  const max = Math.round(temp_max);\n  const min = Math.round(temp_min);\n  const { description, icon } = weather[0];\n\n  return (\n    <>\n      <div className=\"weather__info\">\n        <h2 className=\"weather__city\">\n          {`${name}, ${sys.country}`}\n        </h2>\n        <h3 className=\"weather__temp\">\n          {Math.round(temp)}\n          {(metric === 'standard') && 'K'}\n          {(metric === 'metric') && <span>&#176;C</span>}\n          {(metric === 'imperial') && <span>&#176;F</span>}\n        </h3>\n        <img\n          src={`https://openweathermap.org/img/wn/${icon}@2x.png`}\n          alt=\"icon\"\n          className=\"weather__image\"\n        />\n        <h3 className=\"weather__description\">{`${description.toUpperCase()}`}</h3>\n      </div>\n      <ul className=\"weather__list\">\n        <li className=\"weather__item\">\n          {(language === 'ru') && 'Макс/Мин: '}\n          {(language === 'ua') && 'Макс/Мін: '}\n          {(language === 'en') && 'High/Low: '}\n          {max}\n          {(metric === 'standard') && 'K'}\n          {(metric === 'metric') && <span>&#176;C</span>}\n          {(metric === 'imperial') && <span>&#176;F</span>}\n          /\n          {min}\n          {(metric === 'standard') && 'K'}\n          {(metric === 'metric') && <span>&#176;C</span>}\n          {(metric === 'imperial') && <span>&#176;F</span>}\n        </li>\n        <li className=\"weather__item\">\n          {(language === 'ru') && 'Давление: '}\n          {(language === 'ua') && 'Тиск: '}\n          {(language === 'en') && 'Pressure: '}\n          {pressure}\n          {(language === 'en') ? ' hPa' : ' гПа'}\n        </li>\n        <li className=\"weather__item\">\n          {(language === 'ru') && 'Влажность: '}\n          {(language === 'ua') && 'Вологість: '}\n          {(language === 'en') && 'Humidity: '}\n          {`${humidity}%`}\n        </li>\n        <li className=\"weather__item\">\n          {(language === 'ru') && 'Сила ветра: '}\n          {(language === 'ua') && 'Сила вітру: '}\n          {(language === 'en') && 'Wind: '}\n          {wind.speed}\n          {((metric === 'standard') || (metric === 'metric'))\n            && (language === 'ru' || (language === 'ua'))\n            && ' м/сек'}\n          {((metric === 'standard') || (metric === 'metric'))\n            && (language === 'en')\n            && ' m/sec'}\n\n          {(metric === 'imperial')\n            && (language === 'ru')\n            && ' миля/ч'}\n\n          {(metric === 'imperial')\n            && (language === 'ua')\n            && ' миля/год'}\n\n          {(metric === 'imperial')\n            && (language === 'en')\n            && ' mph'}\n        </li>\n      </ul>\n    </>\n  );\n};\n","const api = {\n  key: '48c10b837a89cf30e61e5a411308c08c',\n  base: 'http://api.openweathermap.org/data/2.5/',\n};\n\nexport const getWeather = async (cityName: string, language: string, metric: string) => {\n  const response = await fetch(`${api.base}weather?q=${cityName}&units=${metric}&APPID=${api.key}&lang=${language}`);\n\n  return response.json();\n};\n","import React, { useEffect, useState } from 'react';\n\nimport { WeatherList } from './components/WeatherList/WeatherList';\nimport { getWeather } from './api/api';\nimport './App.scss';\n\nexport const App: React.FC = () => {\n  const [city, setCity] = useState<string>('');\n  const [selectedCity, setSelectedCity] = useState<string>('Chernivtsi');\n  const [currentWeather, setcurrentWeather] = useState<WeatherAPI | null>(null);\n  const [language, setLanguage] = useState<string>('en');\n  const [metric, setMetric] = useState<string>('metric');\n\n  const loadWeather = async () => {\n    const weatherFromApi = await getWeather(selectedCity, language, metric);\n\n    setcurrentWeather(weatherFromApi);\n  };\n\n  useEffect(() => {\n    loadWeather();\n  }, [selectedCity, language, metric]);\n\n  const hanleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    setSelectedCity(city);\n    setCity('');\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setCity(event.target.value);\n  };\n\n  const selectedLanguage = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setLanguage(event.target.value);\n  };\n\n  const selectedMetric = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setMetric(event.target.value);\n  };\n\n  let chooseCityMessage;\n  let errorMessage;\n\n  switch (language) {\n    case 'en':\n      chooseCityMessage = 'Choose city';\n      errorMessage = 'City is not found';\n      break;\n\n    case 'ru':\n      chooseCityMessage = 'Выберите город';\n      errorMessage = 'Город не найден';\n      break;\n\n    case 'ua':\n      chooseCityMessage = 'Оберіть місто';\n      errorMessage = 'Місто не знайдено';\n      break;\n\n    default:\n      break;\n  }\n\n  let validCity;\n\n  if (currentWeather?.name) {\n    validCity = <WeatherList currentWeather={currentWeather} language={language} metric={metric} />;\n  } else {\n    validCity = <h2 className=\"error-message\">{errorMessage}</h2>;\n  }\n\n  return (\n    <div className=\"app\">\n      <main className=\"main container-lg\">\n        <div className=\"search\">\n          <form\n            className=\"search__form\"\n            onSubmit={hanleSubmit}\n          >\n            <input\n              type=\"text\"\n              className=\"search__field\"\n              placeholder={chooseCityMessage}\n              value={city}\n              onChange={handleChange}\n            />\n          </form>\n\n          <div className=\"select\">\n            <select\n              value={language}\n              onChange={selectedLanguage}\n              className=\"select__language\"\n            >\n              <option value=\"en\" className=\"select__en\">\n                English\n              </option>\n\n              <option value=\"ua\">\n                Ukrainian\n              </option>\n\n              <option value=\"ru\">\n                Russian\n              </option>\n            </select>\n\n            <select\n              value={metric}\n              onChange={selectedMetric}\n              className=\"select__metric\"\n            >\n              <option value=\"metric\">\n                Metric\n              </option>\n\n              <option value=\"standard\">\n                Standard\n              </option>\n\n              <option value=\"imperial\">\n                Imperial\n              </option>\n            </select>\n          </div>\n        </div>\n\n        <div className=\"weather\">\n          {currentWeather && (validCity)}\n        </div>\n      </main>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}